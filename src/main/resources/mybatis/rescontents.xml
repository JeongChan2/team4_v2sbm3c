<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="dev.mvc.rescontents.RescontentsDAOInter">
  <!-- 등록한 레코드 갯수 1 리턴, #{adminno}: public int getAdminno() 호출됨 -->
  <insert id="create" parameterType="dev.mvc.rescontents.RescontentsVO">
    INSERT INTO rescontents(rescontentsno, managerno, resno, title, rescontent, passwd, word, file1, 
                            file1saved, thumb1, size1, rdate, foodno)
    VALUES(rescontents_seq.nextval, #{managerno}, #{resno}, #{title}, #{rescontent}, #{passwd}, #{word},#{file1}
                            , #{file1saved}, #{thumb1}, #{size1}, sysdate, #{foodno})
  </insert>

    <!-- 모든 식당 카테고리의 등록된 글목록 -->
  <select id="list_all" resultType="dev.mvc.rescontents.RescontentsVO">
    SELECT rescontentsno, managerno, resno, title, rescontent, recom, cnt, replycnt, passwd, word, rdate,
               file1, file1saved, thumb1, size1
    FROM rescontents
    ORDER BY rescontentsno DESC
  </select> 
  
      <!-- 모든 식당 카테고리의 등록된 글목록 -->
  <select id="food_list_all" resultType="dev.mvc.rescontents.JoinVO">
		SELECT r.rescontentsno, r.managerno, r.resno, r.title, r.rescontent, r.recom, r.cnt, r.replycnt, r.passwd,
		        r.word, r.rdate,r.file1, r.file1saved, r.thumb1, r.size1, r.foodno, 
		        f.f_calories, f.f_carbohydrates, f.f_protein, f.f_fat
		FROM rescontents r JOIN food f ON r.foodno = f.foodno
		ORDER BY rescontentsno DESC
  </select> 
  
    <!-- 특정 식당 카테고리의 등록된 글목록 -->
  <select id="list_by_resno" resultType="dev.mvc.rescontents.RescontentsVO" parameterType="int">
    SELECT rescontentsno, managerno, resno, title, rescontent, recom, cnt, replycnt, rdate,
              file1, file1saved, thumb1, size1
    FROM rescontents 
    WHERE resno = #{resno}
    ORDER BY rescontentsno DESC
  </select> 
  
    <!-- 일반적인 조회 -->
  <select id="read" resultType="dev.mvc.rescontents.RescontentsVO" parameterType="int">
    SELECT rescontentsno, managerno, resno, title, rescontent, recom, cnt, replycnt, passwd, word, rdate,
              file1, file1saved, thumb1, size1, map, youtube
    FROM rescontents
    WHERE rescontentsno = #{rescontentsno}
  </select>
  
    <!-- map 등록, 수정, 삭제, 
         HashMap: VO 클래스는 변수가 너무 많아서 메모리 낭비가 발생함으로,
         보통 3개 이하의 적은 변수만 전달하는 경우 HashMap 사용 권장 -->
  <update id="map" parameterType="HashMap">
    UPDATE rescontents SET map=#{map} WHERE rescontentsno=#{rescontentsno}
  </update>
  
    <!-- Youtube 등록, 수정, 삭제, 
         HashMap: VO 클래스는 변수가 너무 많아서 메모리 낭비가 발생함으로,
         보통 3개 이하의 적은 변수만 전달하는 경우 HashMap 사용 권장 -->
  <update id="youtube" parameterType="HashMap">
    UPDATE rescontents SET youtube=#{youtube} WHERE rescontentsno=#{rescontentsno}
  </update>
  
  <!-- 카테고리별 검색 목록 -->
  <select id="list_by_resno_search" resultType="dev.mvc.rescontents.RescontentsVO" parameterType="HashMap">
    SELECT rescontentsno, managerno, resno, title, rescontent, recom, cnt, replycnt, passwd, word, rdate,
            file1, file1saved, thumb1, size1, map, youtube
    FROM rescontents
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
        WHERE resno=#{resno}
      </when>
      <otherwise> <!-- 검색하는 경우 -->
        WHERE resno=#{resno} AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(rescontent) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
      </otherwise>
    </choose>
    ORDER BY rescontentsno DESC   
  </select>
   
  <!-- 카테고리별 검색 레코드 갯수 -->
  <select id="search_count" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt
    FROM rescontents
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우의 레코드 갯수 -->
        WHERE resno=#{resno}
      </when>
      <otherwise> <!-- 검색하는 경우의 레코드 갯수 -->
        WHERE resno=#{resno} AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(rescontent) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
      </otherwise>
    </choose>
  </select>   
  
  <!-- 카테고리별 검색 + 페이징 목록 -->
  <select id="list_by_resno_search_paging" resultType="dev.mvc.rescontents.RescontentsVO" parameterType="dev.mvc.rescontents.RescontentsVO">
   SELECT rescontentsno, managerno, resno, title, rescontent, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube, r
   FROM (
              SELECT rescontentsno, managerno, resno, title, rescontent, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube, rownum as r
              FROM (
                        SELECT rescontentsno, managerno, resno, title, rescontent, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube
                        FROM rescontents
                        <choose>
                          <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
                            WHERE resno=#{resno}
                          </when>
                          <otherwise>
                            WHERE resno=#{resno} AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%' 
                                                              OR UPPER(rescontent) LIKE '%' || UPPER(#{word}) || '%' 
                                                              OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
                          </otherwise>
                        </choose>
                        ORDER BY rescontentsno DESC
               )
    )
    WHERE <![CDATA[ r >= #{start_num} AND r <= #{end_num} ]]>
     
    <!-- 1 page: WHERE r >= 1 AND r <= 10; 
          2 page: WHERE r >= 11 AND r <= 20;
          3 page: WHERE r >= 21 AND r <= 30; -->
  </select>
  
    <!-- 패스워드 검사 -->
  <select id="password_check" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt 
    FROM rescontents
    WHERE rescontentsno = #{rescontentsno} AND passwd=#{passwd}
  </select>
  
    <!-- 글 수정 -->
  <update id="update_text" parameterType="dev.mvc.rescontents.RescontentsVO">
    UPDATE rescontents
    SET title=#{title}, rescontent=#{rescontent},  word=#{word}, foodno=#{foodno}
    WHERE rescontentsno = #{rescontentsno}
  </update>
  
    <!-- 파일 수정 -->
  <update id="update_file" parameterType="dev.mvc.rescontents.RescontentsVO">
    UPDATE rescontents
    SET file1=#{file1}, file1saved=#{file1saved}, thumb1=#{thumb1}, size1=#{size1}
    WHERE rescontentsno = #{rescontentsno}
  </update>  
  
    <!-- 삭제 -->
  <delete id="delete" parameterType="int">
    DELETE FROM rescontents
    WHERE rescontentsno=#{rescontentsno}
  </delete>
  
      <!-- 특정 카테고리에 속한 레코드 갯수를 리턴 -->
  <select id="count_by_resno" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt 
    FROM rescontents 
    WHERE resno=#{resno}
  </select>
  
    <!-- 특정 카테고리에 속한 모든 레코드 삭제 -->
  <delete id="delete_by_resno" parameterType="int">
    DELETE FROM rescontents
    WHERE resno=#{resno}
  </delete>
  
</mapper> 
